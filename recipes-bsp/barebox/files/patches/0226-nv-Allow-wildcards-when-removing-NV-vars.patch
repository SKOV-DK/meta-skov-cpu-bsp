From: Sascha Hauer <s.hauer@pengutronix.de>
Date: Fri, 22 Jul 2016 11:51:34 +0200
Subject: [PATCH] nv: Allow wildcards when removing NV vars

With this patch 'nv -r' can also take "*" and "?" wildcards for nv
variables. This makes it easier to remove multiple nv variables.

Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de>
---
 common/Kconfig     |  1 +
 common/globalvar.c | 18 ++++++++++--------
 2 files changed, 11 insertions(+), 8 deletions(-)

diff --git a/common/Kconfig b/common/Kconfig
index 8230e4bdef8a..38225ebe63d6 100644
--- a/common/Kconfig
+++ b/common/Kconfig
@@ -172,6 +172,7 @@ config NVVAR
 	default y if !SHELL_NONE
 	depends on GLOBALVAR
 	depends on ENV_HANDLING
+	select FNMATCH
 	help
 	  Non volatile environment variables begin with "nv.". They behave like
 	  global variables above, but their values are saved in the environment
diff --git a/common/globalvar.c b/common/globalvar.c
index a2eaaa022371..44e6528f6cb5 100644
--- a/common/globalvar.c
+++ b/common/globalvar.c
@@ -10,6 +10,7 @@
 #include <libfile.h>
 #include <generated/utsrelease.h>
 #include <envfs.h>
+#include <fnmatch.h>
 
 static int nv_dirty;
 
@@ -293,22 +294,23 @@ int nvvar_add(const char *name, const char *value)
 
 int nvvar_remove(const char *name)
 {
-	struct param_d *p;
+	struct param_d *p, *tmp;
 	char *fname;
 
 	if (!IS_ENABLED(CONFIG_NVVAR))
 		return -ENOSYS;
 
-	p = get_param_by_name(&nv_device, name);
-	if (!p)
-		return -ENOENT;
+	list_for_each_entry_safe(p, tmp, &nv_device.parameters, list) {
+		if (fnmatch(name, p->name, 0))
+			continue;
 
-	fname = basprintf("/env/nv/%s", p->name);
+		fname = basprintf("/env/nv/%s", p->name);
 
-	dev_remove_param(p);
+		dev_remove_param(p);
 
-	unlink(fname);
-	free(fname);
+		unlink(fname);
+		free(fname);
+	}
 
 	return 0;
 }
