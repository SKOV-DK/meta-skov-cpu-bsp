From: Marc Kleine-Budde <mkl@pengutronix.de>
Date: Tue, 20 Oct 2015 10:05:33 +0200
Subject: [PATCH] of_path: of_find_path() factor out device detection logic
 into separate function

This patch factors out the device detection logic into separate function, so
that it can be used from another function.

Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
---
 drivers/of/of_path.c | 81 ++++++++++++++++++++++++++++------------------------
 1 file changed, 44 insertions(+), 37 deletions(-)

diff --git a/drivers/of/of_path.c b/drivers/of/of_path.c
index 992972c9b52e..65fb31bcec59 100644
--- a/drivers/of/of_path.c
+++ b/drivers/of/of_path.c
@@ -106,48 +106,13 @@ out:
 	return ret;
 }
 
-/**
- * of_find_path - translate a path description in the devicetree to a barebox
- *                path
- *
- * @node: the node containing the property with the path description
- * @propname: the property name of the path description
- * @outpath: if this function returns 0 outpath will contain the path belonging
- *           to the input path description. Must be freed with free().
- * @flags: use OF_FIND_PATH_FLAGS_BB to return the .bb device if available
- *
- * paths in the devicetree have the form of a multistring property. The first
- * string contains the full path to the physical device containing the path or
- * a full path to a partition described by the OF partition binding.
- * The remaining strings have the form "<type>:<options>". Currently supported
- * for <type> are:
- *
- * partname:<partname> - find a partition by its partition name. For mtd
- *                       partitions this is the label. For DOS partitions
- *                       this is the number beginning with 0.
- *
- * examples:
- *
- * device-path = &mmc0, "partname:0";
- * device-path = &norflash, "partname:barebox-environment";
- * device-path = &environment_nor;
- */
-int of_find_path(struct device_node *node, const char *propname, char **outpath, unsigned flags)
+static int __of_find_path(struct device_node *node, struct device_node *rnode, const char *propname, char **outpath, unsigned flags)
 {
 	struct of_path op = {};
-	struct device_node *rnode;
-	const char *path, *str;
+	const char *str;
 	bool add_bb = false;
 	int i, ret;
 
-	path = of_get_property(node, propname, NULL);
-	if (!path)
-		return -EINVAL;
-
-	rnode = of_find_node_by_path(path);
-	if (!rnode)
-		return -ENODEV;
-
 	op.dev = of_find_device_by_node_path(rnode->full_name);
 	if (!op.dev) {
 		op.dev = of_find_device_by_node_path(rnode->parent->full_name);
@@ -182,3 +147,45 @@ int of_find_path(struct device_node *node, const char *propname, char **outpath,
 
 	return 0;
 }
+
+/**
+ * of_find_path - translate a path description in the devicetree to a barebox
+ *                path
+ *
+ * @node: the node containing the property with the path description
+ * @propname: the property name of the path description
+ * @outpath: if this function returns 0 outpath will contain the path belonging
+ *           to the input path description. Must be freed with free().
+ * @flags: use OF_FIND_PATH_FLAGS_BB to return the .bb device if available
+ *
+ * paths in the devicetree have the form of a multistring property. The first
+ * string contains the full path to the physical device containing the path or
+ * a full path to a partition described by the OF partition binding.
+ * The remaining strings have the form "<type>:<options>". Currently supported
+ * for <type> are:
+ *
+ * partname:<partname> - find a partition by its partition name. For mtd
+ *                       partitions this is the label. For DOS partitions
+ *                       this is the number beginning with 0.
+ *
+ * examples:
+ *
+ * device-path = &mmc0, "partname:0";
+ * device-path = &norflash, "partname:barebox-environment";
+ * device-path = &environment_nor;
+ */
+int of_find_path(struct device_node *node, const char *propname, char **outpath, unsigned flags)
+{
+	struct device_node *rnode;
+	const char *path;
+
+	path = of_get_property(node, propname, NULL);
+	if (!path)
+		return -EINVAL;
+
+	rnode = of_find_node_by_path(path);
+	if (!rnode)
+		return -ENODEV;
+
+	return __of_find_path(node, rnode, propname, outpath, flags);
+}
