From bb385ebf873aca9368835791eb29610c71f70598 Mon Sep 17 00:00:00 2001
From: Sam Ravnborg <sam@ravnborg.org>
Date: Thu, 23 Aug 2018 22:20:03 +0200
Subject: [PATCH 17/17] arm9-cpu: fix DRAM memory size config

And simplify the function to check for 120MiB
as we no longer uses magic memory locations to
tell bootloader the memory size.

Signed-off-by: Sam Ravnborg <sam@ravnborg.org>
---
 contrib/board/skov/arm9_cpu/arm9_cpu.c | 60 +++++++++++++++-------------------
 1 file changed, 26 insertions(+), 34 deletions(-)

diff --git a/contrib/board/skov/arm9_cpu/arm9_cpu.c b/contrib/board/skov/arm9_cpu/arm9_cpu.c
index 7a8b3aa..21609d8 100644
--- a/contrib/board/skov/arm9_cpu/arm9_cpu.c
+++ b/contrib/board/skov/arm9_cpu/arm9_cpu.c
@@ -280,47 +280,39 @@ static void sdramc_hw_init(void)
 	pio_configure(sdramc_pins);
 }
 
-/* Run-time check for RAM size
- * Pass result to U-Boot
+/*
+ * Check if target is 64 or 128 MB and adjust AT91_SDRAMC_CR
+ * accordingly.
+ * Size      Start      Size(hex)
+ * 64 MB  => 0x20000000 0x4000000
+ * 128 MB => 0x20000000 0x8000000
+ *
+ * If 64 MiB RAM with NC_10 set, then we see holes in the memory, which
+ * is how we detect if memory is 64 or 128 MiB
  */
 static int check_if_128mb(void)
 {
-	unsigned int *test_adr1 = (unsigned int *)0x20000000;
-	unsigned int *test_adr2 = (unsigned int *)0x21000000;
-	unsigned int test_val1 = 0x534b4f56;
-	unsigned int test_val2 = 0x564f4b53;
+	unsigned int *test_adr = (unsigned int *)0x20000000;
+	unsigned int test_val = 0xdeadbee0;
 	unsigned int *p;
-	int mb128;
 	int i;
 
-	mb128 = 1;
-
 	/* Fill up memory with a known pattern */
-	p = test_adr1;
-	for (i = 0; i < 3000; i++) {
-		*p++ = test_val2 + i;
+	p = test_adr;
+	for (i = 0; i < 0xb00; i++) {
+		*p++ = test_val + i;
 	}
 
-	/* Check that we can read back the values just written
-	* If one or more fails, we have only 64 MB
-	*/
-	p = test_adr1;
-	for (i = 0; i < 3000; i++)
-		if (*p++ != (test_val2 + i))
-			mb128 = 0;
-
-	/* Signal to U-Boot the memory size. See dram_init() */
-	if (mb128) {
-		dbg_log(1,"128MB Ram\n");
-		*test_adr1 = test_val1; //SKOV
-		*test_adr2 = test_val2; //VOKS
-	} else {
-		dbg_log(1,"64MB Ram\n");
-		*test_adr1 = test_val2; //VOKS
-		*test_adr2 = test_val1; //SKOV
-	}
+	/*
+	 * Check that we can read back the values just written
+	 * If one or more fails, we have only 64 MB
+	 */
+	p = test_adr;
+	for (i = 0; i < 0xb00; i++)
+		if (*p++ != (test_val + i))
+			return 0;
 
-	return mb128;
+	return 1;
 }
 
 static void sdramc0_init(void)
@@ -335,7 +327,7 @@ static void sdramc0_init(void)
 				| AT91C_SDRAMC_TRP_2 | AT91C_SDRAMC_TRCD_2
 				| AT91C_SDRAMC_TRAS_5 | AT91C_SDRAMC_TXSR_8;
 #else
-	sdramc_config.cr = AT91C_SDRAMC_NC_9 | AT91C_SDRAMC_NR_13 | AT91C_SDRAMC_CAS_2
+	sdramc_config.cr = AT91C_SDRAMC_NC_10 | AT91C_SDRAMC_NR_13 | AT91C_SDRAMC_CAS_2
 				| AT91C_SDRAMC_NB_4_BANKS | AT91C_SDRAMC_DBW_32_BITS
 				| AT91C_SDRAMC_TWR_2 | AT91C_SDRAMC_TRC_7
 				| AT91C_SDRAMC_TRP_2 | AT91C_SDRAMC_TRCD_2
@@ -360,8 +352,8 @@ static void sdramc0_init(void)
 		/* Other parameters does not need to be changed due to chip size. */
 
 		/* Clear NC bits */
-		sdramc_config.cr &= ~0x3;
-		sdramc_config.cr = AT91C_SDRAMC_NC_9;
+		sdramc_config.cr &= ~AT91C_SDRAMC_NC;
+		sdramc_config.cr |= AT91C_SDRAMC_NC_9;
 		sdramc_initialize(&sdramc_config, AT91C_BASE_EBI0_CS1);
 	}
 #endif
-- 
2.12.0

