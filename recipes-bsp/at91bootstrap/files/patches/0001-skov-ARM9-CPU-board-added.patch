From 07d7ab0ab6482a28e9a00167cfae5c5a1991f160 Mon Sep 17 00:00:00 2001
From: Sam Ravnborg <srn@skov.dk>
Date: Sat, 14 Jan 2017 21:42:46 +0100
Subject: [PATCH] skov: ARM9 CPU board added

---
 board/Config.in                                 |   1 +
 contrib/board/Config.in.board                   |   1 +
 contrib/board/Config.in.boardname               |   1 +
 contrib/board/Config.in.linux_arg               |   1 +
 contrib/board/skov/arm9_cpu/Config.in.board     |  13 +
 contrib/board/skov/arm9_cpu/Config.in.boardname |   2 +
 contrib/board/skov/arm9_cpu/Config.in.linux_arg |   3 +
 contrib/board/skov/arm9_cpu/arm9_cpu.c          | 530 ++++++++++++++++++++++++
 contrib/board/skov/arm9_cpu/arm9_cpu.h          | 138 ++++++
 contrib/board/skov/arm9_cpu/arm9_cpu_defconfig  |   7 +
 contrib/board/skov/arm9_cpu/board.mk            |   3 +
 contrib/include/contrib_board.h                 |   4 +
 12 files changed, 704 insertions(+)
 create mode 100644 contrib/board/skov/arm9_cpu/Config.in.board
 create mode 100644 contrib/board/skov/arm9_cpu/Config.in.boardname
 create mode 100644 contrib/board/skov/arm9_cpu/Config.in.linux_arg
 create mode 100644 contrib/board/skov/arm9_cpu/arm9_cpu.c
 create mode 100644 contrib/board/skov/arm9_cpu/arm9_cpu.h
 create mode 100644 contrib/board/skov/arm9_cpu/arm9_cpu_defconfig
 create mode 100644 contrib/board/skov/arm9_cpu/board.mk

diff --git a/board/Config.in b/board/Config.in
index 4b63347..4f003d1 100644
--- a/board/Config.in
+++ b/board/Config.in
@@ -216,6 +216,7 @@ config CONFIG_MACH_TYPE
 	default "1099"	if AT91SAM9260
 	default "0x350"	if AT91SAM9261
 	default "0x4B2"	if AT91SAM9263
+	default "1203"	if ARM9_CPU
 	default "1326"	if AT91SAM9RL
 	default "0x44B"	if AT91SAM9XE
 	default "0x86F"	if AT91SAM9G10
diff --git a/contrib/board/Config.in.board b/contrib/board/Config.in.board
index d455e66..e84697a 100644
--- a/contrib/board/Config.in.board
+++ b/contrib/board/Config.in.board
@@ -5,3 +5,4 @@ source "contrib/board/l+g/vinco/Config.in.board"
 source "contrib/board/acme/at91sam9x5_aria/Config.in.board"
 source "contrib/board/acme/at91sam9x5_arietta/Config.in.board"
 source "contrib/board/acme/sama5d3_acqua/Config.in.board"
+source "contrib/board/skov/arm9_cpu/Config.in.board"
diff --git a/contrib/board/Config.in.boardname b/contrib/board/Config.in.boardname
index 8e8a29d..439c9ae 100644
--- a/contrib/board/Config.in.boardname
+++ b/contrib/board/Config.in.boardname
@@ -5,3 +5,4 @@ source "contrib/board/l+g/vinco/Config.in.boardname"
 source "contrib/board/acme/at91sam9x5_aria/Config.in.boardname"
 source "contrib/board/acme/at91sam9x5_arietta/Config.in.boardname"
 source "contrib/board/acme/sama5d3_acqua/Config.in.boardname"
+source "contrib/board/skov/arm9_cpu/Config.in.boardname"
diff --git a/contrib/board/Config.in.linux_arg b/contrib/board/Config.in.linux_arg
index 3a2eeef..94a91a1 100644
--- a/contrib/board/Config.in.linux_arg
+++ b/contrib/board/Config.in.linux_arg
@@ -5,3 +5,4 @@ source "contrib/board/l+g/vinco/Config.in.linux_arg"
 source "contrib/board/acme/at91sam9x5_aria/Config.in.linux_arg"
 source "contrib/board/acme/at91sam9x5_arietta/Config.in.linux_arg"
 source "contrib/board/acme/sama5d3_acqua/Config.in.linux_arg"
+source "contrib/board/skov/arm9_cpu/Config.in.linux_arg"
diff --git a/contrib/board/skov/arm9_cpu/Config.in.board b/contrib/board/skov/arm9_cpu/Config.in.board
new file mode 100644
index 0000000..1858023
--- /dev/null
+++ b/contrib/board/skov/arm9_cpu/Config.in.board
@@ -0,0 +1,13 @@
+config	CONFIG_ARM9_CPU
+	bool "arm9_cpu"
+	select AT91SAM9263
+	select CONFIG_SDRAM
+	select ALLOW_FLASH
+	select ALLOW_SDCARD
+	select ALLOW_PSRAM
+	select ALLOW_SDRAM_16BIT
+	select ALLOW_CPU_CLK_200MHZ
+	select ALLOW_CRYSTAL_16_000MHZ
+	select SUPPORT_BUS_SPEED_100MHZ
+	help
+	    Use the SKOV ARM9 CPU board
diff --git a/contrib/board/skov/arm9_cpu/Config.in.boardname b/contrib/board/skov/arm9_cpu/Config.in.boardname
new file mode 100644
index 0000000..c6302e0
--- /dev/null
+++ b/contrib/board/skov/arm9_cpu/Config.in.boardname
@@ -0,0 +1,2 @@
+config CONFIG_BOARDNAME
+	default "arm9_cpu" if CONFIG_ARM9_CPU
diff --git a/contrib/board/skov/arm9_cpu/Config.in.linux_arg b/contrib/board/skov/arm9_cpu/Config.in.linux_arg
new file mode 100644
index 0000000..40aa804
--- /dev/null
+++ b/contrib/board/skov/arm9_cpu/Config.in.linux_arg
@@ -0,0 +1,3 @@
+config CONFIG_LINUX_KERNEL_ARG_STRING
+	default "mem=64M console=ttyS0,115200 mtdparts=atmel_nand:8M(bootstrap/kernel),60M(rootfs),-(spare) root=/dev/mtdblock1 rw rootfstype=jffs2" if CONFIG_ARM9_CPU && !CONFIG_SDCARD
+	default "mem=64M console=ttyS0,115200 root=/dev/mmcblk0p2 rootdelay=2" if CONFIG_ARM9_CPU && CONFIG_SDCARD
diff --git a/contrib/board/skov/arm9_cpu/arm9_cpu.c b/contrib/board/skov/arm9_cpu/arm9_cpu.c
new file mode 100644
index 0000000..dfef95a
--- /dev/null
+++ b/contrib/board/skov/arm9_cpu/arm9_cpu.c
@@ -0,0 +1,530 @@
+/* ----------------------------------------------------------------------------
+ *         ATMEL Microcontroller Software Support
+ * ----------------------------------------------------------------------------
+ * Copyright (c) 2009, Atmel Corporation
+ *
+ * All rights reserved.
+ * PSRAM,16 bit SDRAM support courtesy of Epsilon Group
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * - Redistributions of source code must retain the above copyright notice,
+ * this list of conditions and the disclaimer below.
+ *
+ * Atmel's name may not be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
+ * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
+ * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+#include "common.h"
+#include "hardware.h"
+#include "arch/at91_ccfg.h"
+#include "arch/at91_matrix.h"
+#include "arch/at91_rstc.h"
+#include "arch/at91_pmc.h"
+#include "arch/at91_smc.h"
+#include "arch/at91_pio.h"
+#include "arch/at91_sdramc.h"
+#include "spi.h"
+#include "gpio.h"
+#include "pmc.h"
+#include "usart.h"
+#include "debug.h"
+#include "sdramc.h"
+#include "psram.h"
+#include "timer.h"
+#include "watchdog.h"
+#include "string.h"
+#include "arm9_cpu.h"
+
+static int test_var_init = 0xacdcabba;
+
+static inline void matrix_writel(const unsigned int value, unsigned int reg)
+{
+	writel(value, reg + AT91C_BASE_MATRIX);
+}
+
+static inline unsigned int matrix_readl(unsigned int reg)
+{
+	return readl(reg + AT91C_BASE_MATRIX);
+}
+
+static void at91_matrix_hw_init(void)
+{
+	/* Bus Matrix Master Configuration Register */
+	matrix_writel(AT91C_MATRIX_ULBT_16_BEAT, MATRIX_MCFG0);		/* OHCI */
+	matrix_writel(AT91C_MATRIX_ULBT_8_BEAT, MATRIX_MCFG1);		/* ISI */
+	matrix_writel(AT91C_MATRIX_ULBT_8_BEAT, MATRIX_MCFG2);		/* 2D */
+	matrix_writel(AT91C_MATRIX_ULBT_8_BEAT, MATRIX_MCFG3);		/* DMAC */
+	matrix_writel(AT91C_MATRIX_ULBT_4_BEAT, MATRIX_MCFG4);		/* MACB */
+	matrix_writel(AT91C_MATRIX_ULBT_16_BEAT, MATRIX_MCFG5);		/* LCDC */
+	matrix_writel(AT91C_MATRIX_ULBT_SINGLE_ACCESS, MATRIX_MCFG6);	/* PDC */
+	matrix_writel(AT91C_MATRIX_ULBT_8_BEAT, MATRIX_MCFG7);		/* DBUS */
+	matrix_writel(AT91C_MATRIX_ULBT_4_BEAT, MATRIX_MCFG8);		/* IBUS */
+
+	/* Bus Matrix Slave Configuration Registers */
+	matrix_writel((AT91C_MATRIX_ARBT_FIXED_PRIORITY
+			| AT91C_MATRIX_FIXED_DEFMSTR_ARM926I
+			| AT91C_MATRIX_DEFMSTR_TYPE_LAST_DEFMSTR
+			| AT91C_MATRIX_SLOT_CYCLE_(32)),
+			MATRIX_SCFG0);		/* ROM */
+
+	matrix_writel((AT91C_MATRIX_ARBT_FIXED_PRIORITY
+			| AT91C_MATRIX_FIXED_DEFMSTR_EMAC
+			| AT91C_MATRIX_DEFMSTR_TYPE_LAST_DEFMSTR
+			| AT91C_MATRIX_SLOT_CYCLE_(32)),
+			MATRIX_SCFG1);		/* RAM80K */
+
+	matrix_writel((AT91C_MATRIX_ARBT_FIXED_PRIORITY
+			| AT91C_MATRIX_FIXED_DEFMSTR_USB
+			| AT91C_MATRIX_DEFMSTR_TYPE_LAST_DEFMSTR
+			| AT91C_MATRIX_SLOT_CYCLE_(16)),
+			MATRIX_SCFG2);		/* RAM16K */
+
+	matrix_writel((AT91C_MATRIX_ARBT_FIXED_PRIORITY
+			| AT91C_MATRIX_FIXED_DEFMSTR_PDC
+			| AT91C_MATRIX_DEFMSTR_TYPE_LAST_DEFMSTR
+			| AT91C_MATRIX_SLOT_CYCLE_(4)),
+			MATRIX_SCFG3);		/* PERIPHERALS */
+
+	matrix_writel((AT91C_MATRIX_ARBT_ROUND_ROBIN
+			| AT91C_MATRIX_FIXED_DEFMSTR_ARM926I
+			| AT91C_MATRIX_DEFMSTR_TYPE_LAST_DEFMSTR
+			| AT91C_MATRIX_SLOT_CYCLE_(32)),
+			MATRIX_SCFG4);		/* EBI0 */
+
+	matrix_writel((AT91C_MATRIX_ARBT_FIXED_PRIORITY
+			| AT91C_MATRIX_FIXED_DEFMSTR_LCDC
+			| AT91C_MATRIX_DEFMSTR_TYPE_LAST_DEFMSTR
+			| AT91C_MATRIX_SLOT_CYCLE_(64)),
+			MATRIX_SCFG5);		/* EBI1 */
+
+	matrix_writel((AT91C_MATRIX_ARBT_FIXED_PRIORITY
+			| AT91C_MATRIX_FIXED_DEFMSTR_ARM926D
+			| AT91C_MATRIX_DEFMSTR_TYPE_LAST_DEFMSTR
+			| AT91C_MATRIX_SLOT_CYCLE_(4)),
+			MATRIX_SCFG6);		/* APB */
+
+	/* ROM */
+	matrix_writel((AT91C_MATRIX_M0PR_(1)
+			| AT91C_MATRIX_M1PR_(0)
+			| AT91C_MATRIX_M2PR_(2)
+			| AT91C_MATRIX_M3PR_(1)
+			| AT91C_MATRIX_M4PR_(0)
+			| AT91C_MATRIX_M5PR_(3)
+			| AT91C_MATRIX_M6PR_(2)
+			| AT91C_MATRIX_M7PR_(3)),
+			MATRIX_PRAS0);
+
+	matrix_writel(AT91C_MATRIX_M8PR_(0),
+			MATRIX_PRBS0);
+
+	/* RAM80K */
+	matrix_writel((AT91C_MATRIX_M0PR_(1)
+			| AT91C_MATRIX_M1PR_(2)
+			| AT91C_MATRIX_M2PR_(1)
+			| AT91C_MATRIX_M3PR_(3)
+			| AT91C_MATRIX_M4PR_(0)
+			| AT91C_MATRIX_M5PR_(0)
+			| AT91C_MATRIX_M6PR_(3)
+			| AT91C_MATRIX_M7PR_(0)),
+			MATRIX_PRAS1);
+
+	matrix_writel(AT91C_MATRIX_M8PR_(2),
+			MATRIX_PRBS1);
+
+	/* RAM16K */
+	matrix_writel((AT91C_MATRIX_M0PR_(1)
+			| AT91C_MATRIX_M1PR_(0)
+			| AT91C_MATRIX_M2PR_(2)
+			| AT91C_MATRIX_M3PR_(1)
+			| AT91C_MATRIX_M4PR_(0)
+			| AT91C_MATRIX_M5PR_(3)
+			| AT91C_MATRIX_M6PR_(3)
+			| AT91C_MATRIX_M7PR_(2)),
+			MATRIX_PRAS2);
+
+	matrix_writel(AT91C_MATRIX_M8PR_(0),
+			MATRIX_PRBS2);
+
+	/* PERIPHERALS */
+	matrix_writel((AT91C_MATRIX_M0PR_(0)
+			| AT91C_MATRIX_M1PR_(1)
+			| AT91C_MATRIX_M2PR_(0)
+			| AT91C_MATRIX_M3PR_(2)
+			| AT91C_MATRIX_M4PR_(1)
+			| AT91C_MATRIX_M5PR_(0)
+			| AT91C_MATRIX_M6PR_(3)
+			| AT91C_MATRIX_M7PR_(2)),
+			MATRIX_PRAS3);
+
+	matrix_writel(AT91C_MATRIX_M8PR_(3),
+			MATRIX_PRBS3);
+
+#if defined(CONFIG_PSRAM)
+	/* EBI0 */
+	matrix_writel((AT91C_MATRIX_M0PR_(2)
+			| AT91C_MATRIX_M1PR_(1)
+			| AT91C_MATRIX_M2PR_(1)
+			| AT91C_MATRIX_M3PR_(3)
+			| AT91C_MATRIX_M4PR_(0)
+			| AT91C_MATRIX_M5PR_(3)
+			| AT91C_MATRIX_M6PR_(0)
+			| AT91C_MATRIX_M7PR_(0)),
+			MATRIX_PRAS4);
+
+	matrix_writel(AT91C_MATRIX_M8PR_(2),
+			MATRIX_PRBS4);
+#else
+	/* EBI0 */
+	matrix_writel((AT91C_MATRIX_M0PR_(1)
+			| AT91C_MATRIX_M1PR_(3)
+			| AT91C_MATRIX_M2PR_(0)
+			| AT91C_MATRIX_M3PR_(2)
+			| AT91C_MATRIX_M4PR_(3)
+			| AT91C_MATRIX_M5PR_(0)
+			| AT91C_MATRIX_M6PR_(0)
+			| AT91C_MATRIX_M7PR_(1)),
+			MATRIX_PRAS4);
+
+	matrix_writel(AT91C_MATRIX_M8PR_(2),
+			MATRIX_PRBS4);
+#endif /* #if defined(CONFIG_PSRAM) */
+	/* EBI1 */
+	matrix_writel((AT91C_MATRIX_M0PR_(0)
+			| AT91C_MATRIX_M1PR_(1)
+			| AT91C_MATRIX_M2PR_(0)
+			| AT91C_MATRIX_M3PR_(0)
+			| AT91C_MATRIX_M4PR_(3)
+			| AT91C_MATRIX_M5PR_(2)
+			| AT91C_MATRIX_M6PR_(3)
+			| AT91C_MATRIX_M7PR_(2)),
+			MATRIX_PRAS5);
+
+	matrix_writel(AT91C_MATRIX_M8PR_(1),
+			MATRIX_PRBS5);
+
+	/* APB */
+	matrix_writel((AT91C_MATRIX_M0PR_(1)
+			| AT91C_MATRIX_M1PR_(0)
+			| AT91C_MATRIX_M2PR_(2)
+			| AT91C_MATRIX_M3PR_(1)
+			| AT91C_MATRIX_M4PR_(0)
+			| AT91C_MATRIX_M5PR_(0)
+			| AT91C_MATRIX_M6PR_(3)
+			| AT91C_MATRIX_M7PR_(3)),
+			MATRIX_PRAS4);
+
+	matrix_writel(AT91C_MATRIX_M8PR_(2),
+			MATRIX_PRBS4);
+}
+
+static void at91_dbgu_hw_init(void)
+{
+	/* Configure DBGU pin */
+	const struct pio_desc dbgu_pins[] = {
+		{"RXD", AT91C_PIN_PC(30), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"TXD", AT91C_PIN_PC(31), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{(char *)0, 0, 0, PIO_DEFAULT, PIO_PERIPH_A},
+	};
+
+	/*  Configure the dbgu pins */
+	pmc_enable_periph_clock(AT91C_ID_PIOCDE);
+	pio_configure(dbgu_pins);
+}
+
+static void initialize_dbgu(void)
+{
+	at91_dbgu_hw_init();
+
+	usart_init(BAUDRATE(MASTER_CLOCK, 115200));
+}
+
+#ifdef CONFIG_SDRAM
+static void sdramc_hw_init(void)
+{
+	/* Configure sdramc pins */
+	const struct pio_desc sdramc_pins[] = {
+		{"D16", AT91C_PIN_PD(16), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"D17", AT91C_PIN_PD(17), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"D18", AT91C_PIN_PD(18), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"D19", AT91C_PIN_PD(19), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"D20", AT91C_PIN_PD(20), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"D21", AT91C_PIN_PD(21), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"D22", AT91C_PIN_PD(22), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"D23", AT91C_PIN_PD(23), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"D24", AT91C_PIN_PD(24), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"D25", AT91C_PIN_PD(25), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"D26", AT91C_PIN_PD(26), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"D27", AT91C_PIN_PD(27), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"D28", AT91C_PIN_PD(28), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"D29", AT91C_PIN_PD(29), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"D30", AT91C_PIN_PD(30), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"D31", AT91C_PIN_PD(31), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{(char *) 0, 0, 0, PIO_DEFAULT, PIO_PERIPH_A},
+	};
+
+	/* Configure the SDRAMC PINs */
+	pmc_enable_periph_clock(AT91C_ID_PIOCDE);
+	pio_configure(sdramc_pins);
+}
+
+static void sdramc0_init(void)
+{
+	unsigned int reg;
+	struct sdramc_register sdramc_config;
+
+#ifdef CONFIG_SDRAM_16BIT
+	sdramc_config.cr = AT91C_SDRAMC_NC_10 | AT91C_SDRAMC_NR_13 | AT91C_SDRAMC_CAS_2
+				| AT91C_SDRAMC_NB_4_BANKS | AT91C_SDRAMC_DBW_16_BITS
+				| AT91C_SDRAMC_TWR_2 | AT91C_SDRAMC_TRC_7
+				| AT91C_SDRAMC_TRP_2 | AT91C_SDRAMC_TRCD_2
+				| AT91C_SDRAMC_TRAS_5 | AT91C_SDRAMC_TXSR_8;
+#else
+	sdramc_config.cr = AT91C_SDRAMC_NC_9 | AT91C_SDRAMC_NR_13 | AT91C_SDRAMC_CAS_2
+				| AT91C_SDRAMC_NB_4_BANKS | AT91C_SDRAMC_DBW_32_BITS
+				| AT91C_SDRAMC_TWR_2 | AT91C_SDRAMC_TRC_7
+				| AT91C_SDRAMC_TRP_2 | AT91C_SDRAMC_TRCD_2
+				| AT91C_SDRAMC_TRAS_5 | AT91C_SDRAMC_TXSR_8;
+#endif	/* #ifdef CONFIG_SDRAM_16BIT */
+
+	sdramc_config.tr = (MASTER_CLOCK * 7) / 1000000;
+	sdramc_config.mdr = AT91C_SDRAMC_MD_SDRAM;
+
+	sdramc_hw_init();
+
+	reg =  readl(AT91C_BASE_CCFG + CCFG_EBI0CSA);
+	reg |= AT91C_VDDIOM_SEL_33V;
+	reg |= AT91C_EBI_CS1A_SDRAMC;
+	writel(reg, AT91C_BASE_CCFG + CCFG_EBI0CSA);
+
+	sdramc_initialize(&sdramc_config, AT91C_BASE_EBI0_CS1);
+}
+#endif /* #ifdef CONFIG_SDRAM */
+
+#ifdef CONFIG_PSRAM
+
+#define CONFIG_SYS_PSRAM_DATA_ACCESS_PIN	AT91C_PIN_PE(16)
+static void data_access_enable(void)
+{
+	pio_set_value(CONFIG_SYS_PSRAM_DATA_ACCESS_PIN, 0);
+}
+
+static void psram_hw_init(void)
+{
+	unsigned short *addressMax = (unsigned short *)MICRON_8MB_ADDRESS_MAX;
+
+	const struct pio_desc psram_pins[] = {
+		{"CRE", CONFIG_SYS_PSRAM_DATA_ACCESS_PIN, 1, PIO_DEFAULT, PIO_OUTPUT},
+		{(char *)0, 0, 0, PIO_DEFAULT, PIO_PERIPH_A},
+	};
+
+	/* Configure SMC1 CS0 */
+	writel((AT91C_SMC_NWESETUP_(0)
+		| AT91C_SMC_NCS_WRSETUP_(0)
+		| AT91C_SMC_NRDSETUP_(0)
+		| AT91C_SMC_NCS_RDSETUP_(0)),
+		AT91C_BASE_SMC1 + SMC_SETUP0);
+
+	writel((AT91C_SMC_NWEPULSE_(4)
+		| AT91C_SMC_NCS_WRPULSE_(5)
+		| AT91C_SMC_NRDPULSE_(2)
+		| AT91C_SMC_NCS_RDPULSE_(5)),
+		AT91C_BASE_SMC1 + SMC_PULSE0);
+
+	writel((AT91C_SMC_NWECYCLE_(5)
+		|  AT91C_SMC_NRDCYCLE_(7)),
+		AT91C_BASE_SMC1 + SMC_CYCLE0);
+
+	writel((AT91C_SMC_READMODE
+		| AT91C_SMC_WRITEMODE
+		| AT91C_SMC_BAT_BYTE_SELECT
+		| AT91C_SMC_DBW_WIDTH_BITS_16
+		| AT91C_SMC_PMEN
+		| AT91C_SMC_PS_SIZE_THIRTY_TWO_BYTES),
+		AT91C_BASE_SMC1 + SMC_CTRL0);
+
+	/* Configure psram pins */
+	pio_configure(psram_pins);
+
+	data_access_enable();
+
+	/* Enable page mode */
+	readl(addressMax);
+	readl(addressMax);
+	writel(MICRON_RCR, addressMax);
+	writel(MICRON_PAGE_MODE_ENABLE, addressMax);
+}
+#endif /* #ifdef CONFIG_PSRAM */
+
+#if defined(CONFIG_NANDFLASH_RECOVERY) || defined(CONFIG_DATAFLASH_RECOVERY)
+static void recovery_buttons_hw_init(void)
+{
+	/* Configure recovery button PINs */
+	const struct pio_desc recovery_button_pins[] = {
+		{"RECOVERY_BUTTON", CONFIG_SYS_RECOVERY_BUTTON_PIN, 0, PIO_PULLUP, PIO_INPUT},
+		{(char *)0, 0, 0, PIO_DEFAULT, PIO_PERIPH_A},
+	};
+
+	pmc_enable_periph_clock(AT91C_ID_PIOCDE);
+	pio_configure(recovery_button_pins);
+}
+#endif /* #if defined(CONFIG_NANDFLASH_RECOVERY) || defined(CONFIG_DATAFLASH_RECOVERY) */
+
+#ifdef CONFIG_HW_INIT
+void hw_init(void)
+{
+	/* Disable watchdog */
+	at91_disable_wdt();
+
+	/*
+	 * At this stage the main oscillator is supposed to be enabled
+	 * PCK = MCK = MOSC
+	 */
+	/* Configure PLLA = MOSC * (PLL_MULA + 1) / PLL_DIVA */
+	pmc_cfg_plla(PLLA_SETTINGS);
+
+	/* PCK = PLLA = 2 * MCK */
+	pmc_cfg_mck(MCKR_SETTINGS);
+
+	/* Switch MCK on PLLA output */
+	pmc_cfg_mck(MCKR_CSS_SETTINGS);
+
+	/* Enable External Reset */
+	writel(AT91C_RSTC_KEY_UNLOCK | AT91C_RSTC_URSTEN, AT91C_BASE_RSTC + RSTC_RMR);
+
+	at91_matrix_hw_init();
+
+	/* Init timer */
+	timer_init();
+
+	/* Initialize dbgu */
+	initialize_dbgu();
+
+	/* Test if variables are initialized */
+	if (test_var_init != 0xacdcabba) {
+		dbg_info("Error: test_var_init=%x\n\r", test_var_init);
+	}
+
+#ifdef CONFIG_SDRAM
+	/* Initialize SDRAMC0 */
+	sdramc0_init();
+#endif
+
+#if defined(CONFIG_PSRAM)
+	psram_hw_init();
+#endif
+
+#if defined(CONFIG_NANDFLASH_RECOVERY) || defined(CONFIG_DATAFLASH_RECOVERY)
+	/* Init the recovery buttons pins */
+	recovery_buttons_hw_init();
+#endif
+}
+#endif /* #ifdef CONFIG_HW_INIT */
+
+#ifdef CONFIG_DATAFLASH
+void at91_spi0_hw_init(void)
+{
+	/* Configure spi0 PINs */
+	const struct pio_desc spi0_pins[] = {
+		{"MISO",	AT91C_PIN_PA(0),	0, PIO_DEFAULT, PIO_PERIPH_B},
+		{"MOSI",	AT91C_PIN_PA(1),	0, PIO_DEFAULT, PIO_PERIPH_B},
+		{"SPCK",	AT91C_PIN_PA(2),	0, PIO_DEFAULT, PIO_PERIPH_B},
+		{"NPCS",	CONFIG_SYS_SPI_PCS,	1, PIO_PULLUP, PIO_OUTPUT},
+		{(char *)0, 0, 0, PIO_DEFAULT, PIO_PERIPH_A},
+	};
+
+	/* Configure the spi0 pins */
+	pmc_enable_periph_clock(AT91C_ID_PIOA);
+	pio_configure(spi0_pins);
+
+	/* Enable the spi0 clock */
+	pmc_enable_periph_clock(AT91C_ID_SPI0);
+}
+#endif /* CONFIG_DATAFLASH */
+
+#ifdef CONFIG_SDCARD
+#ifdef CONFIG_OF_LIBFDT
+void at91_board_set_dtb_name(char *of_name)
+{
+	strcpy(of_name, "at91sam9263ek.dtb");
+}
+#endif
+
+void at91_mci0_hw_init(void)
+{
+	/* Note: For at91sam9263ek, using MCI1 instead of MCI0 as SD Card booting */
+	/* Configure the MCI1 pins */
+	const struct pio_desc mci_pins[] = {
+		{"MCI1_CK",	AT91C_PIN_PA(6), 0, PIO_PULLUP, PIO_PERIPH_A},
+		{"MCI1_CDA",	AT91C_PIN_PA(7), 0, PIO_PULLUP, PIO_PERIPH_A},
+		{"MCI1_DA0",	AT91C_PIN_PA(8), 0, PIO_PULLUP, PIO_PERIPH_A},
+		{"MCI1_DA1",	AT91C_PIN_PA(9), 0, PIO_PULLUP, PIO_PERIPH_A},
+		{"MCI1_DA2",	AT91C_PIN_PA(10), 0, PIO_PULLUP, PIO_PERIPH_A},
+		{"MCI1_DA3",	AT91C_PIN_PA(11), 0, PIO_PULLUP, PIO_PERIPH_A},
+		{(char *)0, 0, 0, PIO_DEFAULT, PIO_PERIPH_A},
+
+	};
+
+	pmc_enable_periph_clock(AT91C_ID_PIOA);
+	pio_configure(mci_pins);
+
+	/* Enable the clock */
+	pmc_enable_periph_clock(AT91C_ID_MCI1);
+}
+#endif /* #ifdef CONFIG_SDCARD */
+
+#ifdef CONFIG_NANDFLASH
+void nandflash_hw_init(void)
+{
+	unsigned int reg;
+
+	/* Configure NANDFlash pins*/
+	const struct pio_desc nand_pins[] = {
+		{"NANDCS",	CONFIG_SYS_NAND_ENABLE_PIN,	1, PIO_PULLUP, PIO_OUTPUT},
+		{(char *)0, 	0, 0, PIO_DEFAULT, PIO_PERIPH_A},
+	};
+
+	/* Configure the NANDFlash pins */
+	pio_configure(nand_pins);
+	pmc_enable_periph_clock(AT91C_ID_PIOCDE);
+
+	/* Setup Smart Media, first enable the address range of CS3 in HMATRIX user interface  */
+	reg = readl(AT91C_BASE_CCFG + CCFG_EBI0CSA);
+	reg |= AT91C_EBI_CS3A_SM;
+	writel(reg, AT91C_BASE_CCFG + CCFG_EBI0CSA);
+
+	/* Configure SMC CS3 */
+	writel((AT91C_SMC_NWESETUP_(1)
+		| AT91C_SMC_NCS_WRSETUP_(1)
+		| AT91C_SMC_NRDSETUP_(1)
+		| AT91C_SMC_NCS_RDSETUP_(1)),
+		AT91C_BASE_SMC0 + SMC_SETUP3);
+
+	writel((AT91C_SMC_NWEPULSE_(3)
+		| AT91C_SMC_NCS_WRPULSE_(3)
+		| AT91C_SMC_NRDPULSE_(3)
+		| AT91C_SMC_NCS_RDPULSE_(3)),
+		AT91C_BASE_SMC0 + SMC_PULSE3);
+
+	writel((AT91C_SMC_NWECYCLE_(5)
+		|  AT91C_SMC_NRDCYCLE_(5)),
+		AT91C_BASE_SMC0 + SMC_CYCLE3);
+
+	writel((AT91C_SMC_READMODE
+		| AT91C_SMC_WRITEMODE
+		| AT91C_SMC_NWAITM_NWAIT_DISABLE
+		| AT91C_SMC_DBW_WIDTH_BITS_8
+		| AT91_SMC_TDF_(2)),
+		AT91C_BASE_SMC0 + SMC_CTRL3);
+}
+#endif /* #ifdef CONFIG_NANDFLASH */
diff --git a/contrib/board/skov/arm9_cpu/arm9_cpu.h b/contrib/board/skov/arm9_cpu/arm9_cpu.h
new file mode 100644
index 0000000..555476d
--- /dev/null
+++ b/contrib/board/skov/arm9_cpu/arm9_cpu.h
@@ -0,0 +1,138 @@
+/* ----------------------------------------------------------------------------
+ *         ATMEL Microcontroller Software Support
+ * ----------------------------------------------------------------------------
+ * Copyright (c) 2006, Atmel Corporation
+ *
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * - Redistributions of source code must retain the above copyright notice,
+ * this list of conditions and the disclaimer below.
+ *
+ * Atmel's name may not be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
+ * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
+ * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+#ifndef __ARM9_CPU_H__
+#define __ARM9_CPU_H__
+
+/*
+ * PMC Settings
+ *
+ * The main oscillator is enabled as soon as possible in the c_startup
+ * and MCK is switched on the main oscillator.
+ * PLL initialization is done later in the hw_init() function
+ */
+#if defined(CONFIG_CPU_CLK_200MHZ)
+#if defined(CONFIG_CRYSTAL_16_000MHZ)
+#define MASTER_CLOCK		(200000000/2)
+#define PLLA_SETTINGS		0x2031B004
+#define PLLB_SETTINGS		0x10053001
+#endif /* #if defined(CONFIG_CRYSTAL_16_000MHZ) */
+
+#if defined(CONFIG_CRYSTAL_16_36766MHZ)
+#define MASTER_CLOCK		(199919000/2)
+#define PLLA_SETTINGS		0x20AABF0E
+#endif /* #if defined(CONFIG_CRYSTAL_16_36766MHZ) */
+
+#if defined(CONFIG_CRYSTAL_18_432MHZ)
+#define MASTER_CLOCK		(198656000/2)
+#define PLLA_SETTINGS		0x2060BF09
+#endif /* #if defined(CONFIG_CRYSTAL_18_432MHZ) */
+#endif /* #if defined(CONFIG_CPU_CLK_200MHZ) */
+
+#if defined(CONFIG_CPU_CLK_240MHZ)
+#if defined(CONFIG_CRYSTAL_16_36766MHZ)
+#error "240 MHz not supported for a 16.36766 MHz crystal (Only 200 MHz)"
+#endif
+
+#if defined(CONFIG_CRYSTAL_18_432MHZ)
+#define MASTER_CLOCK		(240000000/2)
+#define PLLA_SETTINGS		0x2271BF30
+#endif /* #if defined(CONFIG_CRYSTAL_18_432MHZ) */
+#endif /* #if defined(CONFIG_CPU_CLK_240MHZ) */
+
+/* Switch MCK on PLLA output PCK = PLLA = 2 * MCK */
+#define MCKR_SETTINGS		(AT91C_PMC_PRES_CLK | AT91C_PMC_MDIV_2)
+#define MCKR_CSS_SETTINGS	(AT91C_PMC_CSS_PLLA_CLK | MCKR_SETTINGS)
+
+/*
+ * SDRAM Controller
+ */
+#define AT91C_BASE_SDRAMC	AT91C_BASE_SDRAMC0
+
+/*
+* DataFlash Settings
+*/
+#define CONFIG_SYS_SPI_CLOCK	AT91C_SPI_CLK
+#define CONFIG_SYS_SPI_MODE	SPI_MODE0
+
+#if defined(CONFIG_SPI_BUS0)
+#define CONFIG_SYS_BASE_SPI	AT91C_BASE_SPI0
+#elif defined(CONFIG_SPI_BUS1)
+#define CONFIG_SYS_BASE_SPI	AT91C_BASE_SPI1
+#endif
+
+#if (AT91C_SPI_PCS_DATAFLASH == AT91C_SPI_PCS0_DATAFLASH)
+#define CONFIG_SYS_SPI_PCS	AT91C_PIN_PA(5)
+#elif (AT91C_SPI_PCS_DATAFLASH == AT91C_SPI_PCS1_DATAFLASH)
+#define CONFIG_SYS_SPI_PCS	AT91C_PIN_PA(3)
+#endif
+
+/*
+ * NandFlash Settings
+ */
+#define CONFIG_SYS_NAND_BASE		AT91C_BASE_EBI0_CS3
+#define CONFIG_SYS_NAND_MASK_ALE	(1 << 21)
+#define CONFIG_SYS_NAND_MASK_CLE	(1 << 22)
+
+#define CONFIG_SYS_NAND_ENABLE_PIN	AT91C_PIN_PD(15)
+
+/**
+ * NorFlash Settings
+ */
+#define AT91C_EBI_CS0			0x10000000
+#define AT91_NORFLASH_BASE		AT91C_EBI_CS0
+#define I_CACHE				(1 << 12)
+
+/*
+ * MCI Settings
+ */
+#define CONFIG_SYS_BASE_MCI		AT91C_BASE_MCI1
+
+/*
+ * Recovery Button
+ */
+#define CONFIG_SYS_RECOVERY_BUTTON_PIN	AT91C_PIN_PC(4)
+#define RECOVERY_BUTTON_NAME	"BP2"
+
+/*
+ * BMS PIN
+ */
+#define CONFIG_SYS_BMS_PIN		AT91C_PIN_PB(3)
+
+/*
+ * SDCARD CARD DETECT
+ */
+#define CONFIG_SYS_SD_CD_PIN		AT91C_PIN_PE(18)
+
+/*
+ * LEDS
+ */
+#define SKOV_LED1			AT91C_PIN_PD(0)
+#define SKOV_LED2			AT91C_PIN_PD(1)
+#define SKOV_LED3			AT91C_PIN_PD(7)
+
+#endif /* #ifndef __ARM9_CPU_H__ */
diff --git a/contrib/board/skov/arm9_cpu/arm9_cpu_defconfig b/contrib/board/skov/arm9_cpu/arm9_cpu_defconfig
new file mode 100644
index 0000000..19c9070
--- /dev/null
+++ b/contrib/board/skov/arm9_cpu/arm9_cpu_defconfig
@@ -0,0 +1,7 @@
+CONFIG_ARM9_CPU=y
+CONFIG_RAM_128MB=y
+CONFIG_SDRAM_16BIT=y
+CONFIG_SDCARD=y
+CONFIG_JUMP_ADDR="0x23800000"
+CONFIG_DEBUG=y
+CONFIG_DEBUG_LOUD=y
diff --git a/contrib/board/skov/arm9_cpu/board.mk b/contrib/board/skov/arm9_cpu/board.mk
new file mode 100644
index 0000000..1d053e7
--- /dev/null
+++ b/contrib/board/skov/arm9_cpu/board.mk
@@ -0,0 +1,3 @@
+CPPFLAGS += -DCONFIG_ARM9_CPU
+ASFLAGS += -DCONFIG_ARM9_CPU
+
diff --git a/contrib/include/contrib_board.h b/contrib/include/contrib_board.h
index 8080378..3d56a04 100644
--- a/contrib/include/contrib_board.h
+++ b/contrib/include/contrib_board.h
@@ -45,4 +45,8 @@
 #include "sama5d3_acqua.h"
 #endif
 
+#ifdef CONFIG_ARM9_CPU
+#include "arm9_cpu.h"
+#endif
+
 #endif
-- 
1.8.3.1

