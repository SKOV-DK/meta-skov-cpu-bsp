From: Michael Grzeschik <m.grzeschik@pengutronix.de>
Date: Fri, 14 Sep 2018 11:43:34 +0200
Subject: [PATCH] dsa: add ksz8873 tail tagging

Signed-off-by: Michael Grzeschik <m.grzeschik@pengutronix.de>
---
 include/net/dsa.h  |  1 +
 net/dsa/dsa.c      |  1 +
 net/dsa/dsa_priv.h |  3 +++
 net/dsa/tag_ksz.c  | 33 +++++++++++++++++++++++++++------
 4 files changed, 32 insertions(+), 6 deletions(-)

diff --git a/include/net/dsa.h b/include/net/dsa.h
index 461e8a7661b7..5a6a75d12f5f 100644
--- a/include/net/dsa.h
+++ b/include/net/dsa.h
@@ -36,6 +36,7 @@ enum dsa_tag_protocol {
 	DSA_TAG_PROTO_DSA,
 	DSA_TAG_PROTO_EDSA,
 	DSA_TAG_PROTO_KSZ,
+	DSA_TAG_PROTO_KSZ8K,
 	DSA_TAG_PROTO_LAN9303,
 	DSA_TAG_PROTO_MTK,
 	DSA_TAG_PROTO_QCA,
diff --git a/net/dsa/dsa.c b/net/dsa/dsa.c
index 9f3209ff7ffd..6633cc6755f7 100644
--- a/net/dsa/dsa.c
+++ b/net/dsa/dsa.c
@@ -54,6 +54,7 @@ const struct dsa_device_ops *dsa_device_ops[DSA_TAG_LAST] = {
 #endif
 #ifdef CONFIG_NET_DSA_TAG_KSZ
 	[DSA_TAG_PROTO_KSZ] = &ksz_netdev_ops,
+	[DSA_TAG_PROTO_KSZ8K] = &ksz8k_netdev_ops,
 #endif
 #ifdef CONFIG_NET_DSA_TAG_LAN9303
 	[DSA_TAG_PROTO_LAN9303] = &lan9303_netdev_ops,
diff --git a/net/dsa/dsa_priv.h b/net/dsa/dsa_priv.h
index 3964c6f7a7c0..d8995d8ef7ff 100644
--- a/net/dsa/dsa_priv.h
+++ b/net/dsa/dsa_priv.h
@@ -208,6 +208,9 @@ extern const struct dsa_device_ops edsa_netdev_ops;
 /* tag_ksz.c */
 extern const struct dsa_device_ops ksz_netdev_ops;
 
+/* tag_ksz.c */
+extern const struct dsa_device_ops ksz8k_netdev_ops;
+
 /* tag_lan9303.c */
 extern const struct dsa_device_ops lan9303_netdev_ops;
 
diff --git a/net/dsa/tag_ksz.c b/net/dsa/tag_ksz.c
index 0f62effad88f..d63a176217e3 100644
--- a/net/dsa/tag_ksz.c
+++ b/net/dsa/tag_ksz.c
@@ -30,18 +30,24 @@
  */
 
 #define	KSZ_INGRESS_TAG_LEN	2
+#define	KSZ8K_INGRESS_TAG_LEN	1
 #define	KSZ_EGRESS_TAG_LEN	1
 
 static struct sk_buff *ksz_xmit(struct sk_buff *skb, struct net_device *dev)
 {
 	struct dsa_port *dp = dsa_slave_to_port(dev);
+	const struct dsa_port *cpu_dp = dp->cpu_dp;
 	struct sk_buff *nskb;
 	int padlen;
+	int taglen = KSZ_INGRESS_TAG_LEN;
 	u8 *tag;
 
+	if (cpu_dp->tag_ops == &ksz8k_netdev_ops)
+		taglen = KSZ8K_INGRESS_TAG_LEN;
+
 	padlen = (skb->len >= ETH_ZLEN) ? 0 : ETH_ZLEN - skb->len;
 
-	if (skb_tailroom(skb) >= padlen + KSZ_INGRESS_TAG_LEN) {
+	if (skb_tailroom(skb) >= padlen + taglen) {
 		/* Let dsa_slave_xmit() free skb */
 		if (__skb_put_padto(skb, skb->len + padlen, false))
 			return NULL;
@@ -49,7 +55,7 @@ static struct sk_buff *ksz_xmit(struct sk_buff *skb, struct net_device *dev)
 		nskb = skb;
 	} else {
 		nskb = alloc_skb(NET_IP_ALIGN + skb->len +
-				 padlen + KSZ_INGRESS_TAG_LEN, GFP_ATOMIC);
+				 padlen + taglen, GFP_ATOMIC);
 		if (!nskb)
 			return NULL;
 		skb_reserve(nskb, NET_IP_ALIGN);
@@ -70,9 +76,14 @@ static struct sk_buff *ksz_xmit(struct sk_buff *skb, struct net_device *dev)
 		consume_skb(skb);
 	}
 
-	tag = skb_put(nskb, KSZ_INGRESS_TAG_LEN);
-	tag[0] = 0;
-	tag[1] = 1 << dp->index; /* destination port */
+	tag = skb_put(nskb, taglen);
+	if (cpu_dp->tag_ops == &ksz8k_netdev_ops)
+		tag[0] = 1 << dp->index; /* destination port */
+
+	if (cpu_dp->tag_ops == &ksz_netdev_ops) {
+		tag[0] = 0;
+		tag[1] = 1 << dp->index; /* destination port */
+	}
 
 	return nskb;
 }
@@ -82,10 +93,15 @@ static struct sk_buff *ksz_rcv(struct sk_buff *skb, struct net_device *dev,
 {
 	u8 *tag;
 	int source_port;
+	struct dsa_port *dp = dev->dsa_ptr;
 
 	tag = skb_tail_pointer(skb) - KSZ_EGRESS_TAG_LEN;
 
-	source_port = tag[0] & 7;
+	if (dp->tag_ops == &ksz8k_netdev_ops)
+		source_port = (tag[0] & 1);
+
+	if (dp->tag_ops == &ksz_netdev_ops)
+		source_port = tag[0] & 7;
 
 	skb->dev = dsa_master_find_slave(dev, 0, source_port);
 	if (!skb->dev)
@@ -100,3 +116,8 @@ const struct dsa_device_ops ksz_netdev_ops = {
 	.xmit	= ksz_xmit,
 	.rcv	= ksz_rcv,
 };
+
+const struct dsa_device_ops ksz8k_netdev_ops = {
+	.xmit	= ksz_xmit,
+	.rcv	= ksz_rcv,
+};
