From: Holger Assmann <h.assmann@pengutronix.de>
Date: Fri, 24 Feb 2023 14:35:55 +0100
Subject: [PATCH] regulator: pca9450: introduce system restart handler

The NXP PCA9450 family can perform configurable system power cycles when
being addressed via I2C-command. We now make this functionality
accessible by introducing the respective restart handler.

Signed-off-by: Holger Assmann <h.assmann@pengutronix.de>
---
 drivers/regulator/pca9450-regulator.c | 55 +++++++++++++++++++++++++++++++++++
 include/linux/regulator/pca9450.h     |  7 +++++
 2 files changed, 62 insertions(+)

diff --git a/drivers/regulator/pca9450-regulator.c b/drivers/regulator/pca9450-regulator.c
index dfe1dd93d56f..395602c10a2d 100644
--- a/drivers/regulator/pca9450-regulator.c
+++ b/drivers/regulator/pca9450-regulator.c
@@ -12,6 +12,7 @@
 #include <linux/module.h>
 #include <linux/of.h>
 #include <linux/platform_device.h>
+#include <linux/reboot.h>
 #include <linux/regulator/driver.h>
 #include <linux/regulator/machine.h>
 #include <linux/regulator/of_regulator.h>
@@ -33,6 +34,7 @@ struct pca9450 {
 	struct device *dev;
 	struct regmap *regmap;
 	struct gpio_desc *sd_vsel_gpio;
+	struct notifier_block restart_handler;
 	enum pca9450_chip_type type;
 	unsigned int rcnt;
 	int irq;
@@ -909,6 +911,34 @@ static irqreturn_t pca9450_irq_handler(int irq, void *data)
 	return IRQ_HANDLED;
 }
 
+static int pca9450_restart(struct notifier_block *nb,
+			   unsigned long mode, void *cmd)
+{
+	struct pca9450 *pmic = container_of(nb, struct pca9450,
+					    restart_handler);
+	struct i2c_client *client = container_of(pmic->dev,
+						 struct i2c_client, dev);
+	int ret = 0;
+	u32 rtype;
+
+	switch (mode) {
+	case REBOOT_WARM:
+		/* Warm reset (Toggle POR_B for 20 ms) */
+		rtype = SWRST_WARM;
+		break;
+	default:
+		/* Cold reset (Power recycle all regulators) */
+		rtype = SWRST_COLD;
+	}
+
+	ret = i2c_smbus_write_byte_data(client, PCA9450_REG_SWRST, rtype);
+	if (ret < 0)
+		dev_alert(pmic->dev, "Failed to shutdown (err = %d)\n", ret);
+
+	mdelay(500);
+	return NOTIFY_DONE;
+}
+
 static int pca9450_i2c_probe(struct i2c_client *i2c)
 {
 	enum pca9450_chip_type type = (unsigned int)(uintptr_t)
@@ -1042,6 +1072,23 @@ static int pca9450_i2c_probe(struct i2c_client *i2c)
 		return dev_err_probe(&i2c->dev, PTR_ERR(pca9450->sd_vsel_gpio),
 				     "Failed to get SD_VSEL GPIO\n");
 
+	/* Register a restart handler for this device. */
+	ret = of_property_read_u32(i2c->dev.of_node, "priority",
+				   &pca9450->restart_handler.priority);
+	if (ret == -EINVAL) {
+		pca9450->restart_handler.priority = SYS_OFF_PRIO_DEFAULT;
+	} else if (ret) {
+		return dev_err_probe(&i2c->dev, ret,
+				     "Failed to determine restart handler priority\n");
+	}
+
+	pca9450->restart_handler.notifier_call = pca9450_restart;
+
+	ret = register_restart_handler(&pca9450->restart_handler);
+	if (ret)
+		return dev_err_probe(&i2c->dev, ret,
+				     "Failed to register restart handler\n");
+
 	dev_info(&i2c->dev, "%s probed.\n",
 		type == PCA9450_TYPE_PCA9450A ? "pca9450a" :
 		(type == PCA9450_TYPE_PCA9451A ? "pca9451a" : "pca9450bc"));
@@ -1049,6 +1096,13 @@ static int pca9450_i2c_probe(struct i2c_client *i2c)
 	return 0;
 }
 
+static void pca9450_i2c_remove(struct i2c_client *i2c)
+{
+	struct pca9450 *pca9450 = dev_get_drvdata(&i2c->dev);
+
+	unregister_restart_handler(&pca9450->restart_handler);
+}
+
 static const struct of_device_id pca9450_of_match[] = {
 	{
 		.compatible = "nxp,pca9450a",
@@ -1081,6 +1135,7 @@ static struct i2c_driver pca9450_i2c_driver = {
 		.of_match_table = pca9450_of_match,
 	},
 	.probe = pca9450_i2c_probe,
+	.remove = pca9450_i2c_remove,
 };
 
 module_i2c_driver(pca9450_i2c_driver);
diff --git a/include/linux/regulator/pca9450.h b/include/linux/regulator/pca9450.h
index b427b5873de1..0b91e1c3575b 100644
--- a/include/linux/regulator/pca9450.h
+++ b/include/linux/regulator/pca9450.h
@@ -228,6 +228,13 @@ enum {
 #define WDOG_B_CFG_COLD_LDO12		0x80
 #define WDOG_B_CFG_COLD			0xC0
 
+/* PCA9450_REG_SWRST bits */
+#define SWRST_NONE			0x00
+#define SWRST_DEFAULTS			0x05
+#define SWRST_COLD_LDO12_CLK32		0x14
+#define SWRST_WARM			0x35
+#define SWRST_COLD			0x64
+
 /* PCA9450_REG_CONFIG2 bits */
 #define I2C_LT_MASK			0x03
 #define I2C_LT_FORCE_DISABLE		0x00
