From: Philipp Zabel <p.zabel@pengutronix.de>
Date: Mon, 28 Oct 2019 12:14:23 +0100
Subject: [PATCH] media: coda: thread all interrupts other than pic run done

Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>
---
 drivers/media/platform/coda/coda-bit.c    | 97 +++++++++++++++++--------------
 drivers/media/platform/coda/coda-common.c |  5 +-
 drivers/media/platform/coda/coda.h        |  2 +
 3 files changed, 57 insertions(+), 47 deletions(-)

diff --git a/drivers/media/platform/coda/coda-bit.c b/drivers/media/platform/coda/coda-bit.c
index f53c2f747a3c..afd77a5a503c 100644
--- a/drivers/media/platform/coda/coda-bit.c
+++ b/drivers/media/platform/coda/coda-bit.c
@@ -2747,57 +2747,16 @@ irqreturn_t coda_irq_handler(int irq, void *data)
 	status = coda_read(dev, CODA_REG_BIT_INT_STATUS);
 	reason = coda_read(dev, CODA_REG_BIT_INT_REASON);
 	coda_write(dev, 0, CODA_REG_BIT_INT_REASON);
-	coda_write(dev, CODA_REG_BIT_INT_CLEAR_SET,
-		      CODA_REG_BIT_INT_CLEAR);
+	coda_write(dev, CODA_REG_BIT_INT_CLEAR_SET, CODA_REG_BIT_INT_CLEAR);
 
 	if (status != 1)
 		pr_debug("coda: interrupt status 0x%x\n", status);
 
-	switch (reason) {
-	case CODA_INT_BIT_INIT:
-	case CODA_INT_BIT_SEQ_INIT:
-	case CODA_INT_BIT_SEQ_END:
-	case CODA_INT_BIT_PIC_RUN:
-	case CODA_INT_BIT_SET_FRAME_BUF:
-		break;
-	case CODA_INT_BIT_BUF_EMPTY:
-		pr_debug("coda: interrupt reason 0x%x (buf empty)\n", reason);
-
-		ctx = v4l2_m2m_get_curr_priv(dev->m2m_dev);
-		if (ctx) {
-			struct __kfifo *kfifo = &ctx->bitstream_fifo.kfifo;
-
-			pr_debug("coda: before: rd = 0x%x, wr = 0x%x\n",
-				 kfifo->out & kfifo->mask,
-				 kfifo->in & kfifo->mask);
-			coda_kfifo_sync_from_device(ctx);
-			pr_debug("coda: after: rd = 0x%x, wr = 0x%x\n",
-				 kfifo->out & kfifo->mask,
-				 kfifo->in & kfifo->mask);
-
-			if (ctx->codec->src_fourcc == V4L2_PIX_FMT_H264) {
-				mutex_lock(&ctx->bitstream_mutex);
-				/* Pad the bitstream */
-				coda_h264_bitstream_pad(ctx, 768);
-
-				pr_debug("coda: padded: rd = 0x%x, wr = 0x%x\n",
-					 kfifo->out & kfifo->mask,
-					 kfifo->in & kfifo->mask);
-
-				/* Sync read pointer to device */
-				coda_kfifo_sync_to_device_write(ctx);
-				mutex_unlock(&ctx->bitstream_mutex);
-			}
-		}
-		break;
-	default:
-		pr_debug("coda: interrupt reason 0x%x\n", reason);
-		break;
+	if (reason != CODA_INT_BIT_PIC_RUN) {
+		dev->bit_int_reason = reason;
+		return IRQ_WAKE_THREAD;
 	}
 
-	if (!(reason & CODA_INT_BIT_PIC_RUN))
-		return IRQ_HANDLED;
-
 	ctx = v4l2_m2m_get_curr_priv(dev->m2m_dev);
 	if (ctx == NULL) {
 		v4l2_err(&dev->v4l2_dev,
@@ -2821,3 +2780,51 @@ irqreturn_t coda_irq_handler(int irq, void *data)
 
 	return IRQ_HANDLED;
 }
+
+irqreturn_t coda_threaded_irq_handler(int irq, void *data)
+{
+	struct coda_dev *dev = data;
+	struct coda_ctx *ctx;
+	struct __kfifo *kfifo;
+
+	if (dev->bit_int_reason != CODA_INT_BIT_BUF_EMPTY) {
+		pr_debug("coda: interrupt reason 0x%x\n", dev->bit_int_reason);
+		return IRQ_HANDLED;
+	}
+
+	pr_debug("coda: interrupt reason 0x%x (buf empty)\n",
+		 dev->bit_int_reason);
+
+	ctx = v4l2_m2m_get_curr_priv(dev->m2m_dev);
+	if (ctx == NULL) {
+		v4l2_err(&dev->v4l2_dev,
+			 "Buffer underrun on released instance\n");
+		return IRQ_HANDLED;
+	}
+
+	kfifo = &ctx->bitstream_fifo.kfifo;
+
+	pr_debug("coda: before: rd = 0x%x, wr = 0x%x\n",
+		 kfifo->out & kfifo->mask,
+		 kfifo->in & kfifo->mask);
+	coda_kfifo_sync_from_device(ctx);
+	pr_debug("coda: after: rd = 0x%x, wr = 0x%x\n",
+		 kfifo->out & kfifo->mask,
+		 kfifo->in & kfifo->mask);
+
+	if (ctx->codec->src_fourcc == V4L2_PIX_FMT_H264) {
+		mutex_lock(&ctx->bitstream_mutex);
+		/* Pad the bitstream */
+		coda_h264_bitstream_pad(ctx, 768);
+
+		pr_debug("coda: padded: rd = 0x%x, wr = 0x%x\n",
+			 kfifo->out & kfifo->mask,
+			 kfifo->in & kfifo->mask);
+
+		/* Sync read pointer to device */
+		coda_kfifo_sync_to_device_write(ctx);
+		mutex_unlock(&ctx->bitstream_mutex);
+	}
+
+	return IRQ_HANDLED;
+}
diff --git a/drivers/media/platform/coda/coda-common.c b/drivers/media/platform/coda/coda-common.c
index e4159d01d5dc..9aba57ebf808 100644
--- a/drivers/media/platform/coda/coda-common.c
+++ b/drivers/media/platform/coda/coda-common.c
@@ -3557,8 +3557,9 @@ static int coda_probe(struct platform_device *pdev)
 		return irq;
 	}
 
-	ret = devm_request_threaded_irq(&pdev->dev, irq, NULL, coda_irq_handler,
-			IRQF_ONESHOT, dev_name(&pdev->dev), dev);
+	ret = devm_request_threaded_irq(&pdev->dev, irq, coda_irq_handler,
+					coda_threaded_irq_handler, IRQF_ONESHOT,
+					dev_name(&pdev->dev), dev);
 	if (ret < 0) {
 		dev_err(&pdev->dev, "failed to request irq: %d\n", ret);
 		return ret;
diff --git a/drivers/media/platform/coda/coda.h b/drivers/media/platform/coda/coda.h
index c97f758d7e32..05bf97a2c540 100644
--- a/drivers/media/platform/coda/coda.h
+++ b/drivers/media/platform/coda/coda.h
@@ -101,6 +101,7 @@ struct coda_dev {
 	struct mutex		coda_mutex;
 	struct workqueue_struct	*workqueue;
 	struct v4l2_m2m_dev	*m2m_dev;
+	u32			bit_int_reason;
 	struct ida		ida;
 	struct dentry		*debugfs_root;
 
@@ -413,6 +414,7 @@ extern const struct coda_context_ops coda9_jpeg_encode_ops;
 extern const struct coda_context_ops coda9_jpeg_decode_ops;
 
 irqreturn_t coda_irq_handler(int irq, void *data);
+irqreturn_t coda_threaded_irq_handler(int irq, void *data);
 irqreturn_t coda9_jpeg_irq_handler(int irq, void *data);
 
 static inline void coda_stats_run(struct v4l2_stats *stats)
