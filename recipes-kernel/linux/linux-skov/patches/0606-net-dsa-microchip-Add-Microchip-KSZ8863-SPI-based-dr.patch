From: Michael Grzeschik <m.grzeschik@pengutronix.de>
Date: Fri, 21 Sep 2018 02:04:23 +0200
Subject: [PATCH] net: dsa: microchip: Add Microchip KSZ8863 SPI based driver
 support

Add KSZ88X3 driver support. We add support for the KXZ88X3 three port
switches using the SPI Interface.

Signed-off-by: Michael Grzeschik <m.grzeschik@pengutronix.de>

---
v1 -> v2: - this glue was not implemented
v2 -> v3: - this glue was part of previous bigger patch
v3 -> v4: - this glue was moved to this separate patch
---
 drivers/net/dsa/microchip/ksz8795_spi.c | 83 ++++++++++++++++++++++++++-------
 1 file changed, 65 insertions(+), 18 deletions(-)

diff --git a/drivers/net/dsa/microchip/ksz8795_spi.c b/drivers/net/dsa/microchip/ksz8795_spi.c
index 8b00f8e6c02f..415665dbbbc4 100644
--- a/drivers/net/dsa/microchip/ksz8795_spi.c
+++ b/drivers/net/dsa/microchip/ksz8795_spi.c
@@ -14,34 +14,86 @@
 #include <linux/regmap.h>
 #include <linux/spi/spi.h>
 
+#include "ksz8.h"
 #include "ksz_common.h"
 
-#define SPI_ADDR_SHIFT			12
-#define SPI_ADDR_ALIGN			3
-#define SPI_TURNAROUND_SHIFT		1
+#define KSZ8795_SPI_ADDR_SHIFT			12
+#define KSZ8795_SPI_ADDR_ALIGN			3
+#define KSZ8795_SPI_TURNAROUND_SHIFT		1
 
-KSZ_REGMAP_TABLE(ksz8795, 16, SPI_ADDR_SHIFT,
-		 SPI_TURNAROUND_SHIFT, SPI_ADDR_ALIGN);
+#define KSZ8863_SPI_ADDR_SHIFT			8
+#define KSZ8863_SPI_ADDR_ALIGN			8
+#define KSZ8863_SPI_TURNAROUND_SHIFT		0
+
+KSZ_REGMAP_TABLE(ksz8795, 16, KSZ8795_SPI_ADDR_SHIFT,
+		 KSZ8795_SPI_TURNAROUND_SHIFT, KSZ8795_SPI_ADDR_ALIGN);
+
+KSZ_REGMAP_TABLE(ksz8863, 16, KSZ8863_SPI_ADDR_SHIFT,
+		 KSZ8863_SPI_TURNAROUND_SHIFT, KSZ8863_SPI_ADDR_ALIGN);
+
+static const struct ksz8_data {
+	const struct regmap_config *regmap_config;
+	int (*switch_register)(struct ksz_device *dev);
+} ksz8_data[] = {
+	{ .regmap_config = ksz8795_regmap_config,
+	  .switch_register = ksz8795_switch_register
+	},
+	{ .regmap_config = ksz8863_regmap_config,
+	  .switch_register = ksz8863_switch_register
+	},
+	{},
+};
+
+static const struct of_device_id ksz8795_dt_ids[] = {
+	{ .compatible = "microchip,ksz8765", .data = &ksz8_data[0] },
+	{ .compatible = "microchip,ksz8794", .data = &ksz8_data[0] },
+	{ .compatible = "microchip,ksz8795", .data = &ksz8_data[0] },
+	{ .compatible = "microchip,ksz8863", .data = &ksz8_data[1] },
+	{ .compatible = "microchip,ksz8873", .data = &ksz8_data[1] },
+	{},
+};
+MODULE_DEVICE_TABLE(of, ksz8795_dt_ids);
 
 static int ksz8795_spi_probe(struct spi_device *spi)
 {
+	const struct regmap_config *regmap_config;
+	const struct of_device_id *match;
+	struct device *ddev = &spi->dev;
+	const struct ksz8_data *data = NULL;
+	struct ksz8 *ksz8;
 	struct regmap_config rc;
 	struct ksz_device *dev;
-	int i, ret;
+	int i, ret = 0;
 
-	dev = ksz_switch_alloc(&spi->dev, spi);
+	ksz8 = devm_kzalloc(&spi->dev, sizeof(struct ksz8), GFP_KERNEL);
+	ksz8->priv = spi;
+
+	dev = ksz_switch_alloc(&spi->dev, ksz8);
 	if (!dev)
 		return -ENOMEM;
 
+	regmap_config = ksz8795_regmap_config;
+
+	if (ddev->of_node) {
+		match = of_match_node(ksz8795_dt_ids, ddev->of_node);
+		if (!match)
+			return -ENOTSUPP;
+
+		if (match->data) {
+			data = match->data;
+			regmap_config = data->regmap_config;
+		}
+	}
+
 	for (i = 0; i < ARRAY_SIZE(ksz8795_regmap_config); i++) {
-		rc = ksz8795_regmap_config[i];
+		rc = regmap_config[i];
 		rc.lock_arg = &dev->regmap_mutex;
 		dev->regmap[i] = devm_regmap_init_spi(spi, &rc);
 		if (IS_ERR(dev->regmap[i])) {
 			ret = PTR_ERR(dev->regmap[i]);
 			dev_err(&spi->dev,
 				"Failed to initialize regmap%i: %d\n",
-				ksz8795_regmap_config[i].val_bits, ret);
+				regmap_config[i].val_bits, ret);
 			return ret;
 		}
 	}
@@ -49,7 +101,10 @@ static int ksz8795_spi_probe(struct spi_device *spi)
 	if (spi->dev.platform_data)
 		dev->pdata = spi->dev.platform_data;
 
-	ret = ksz8795_switch_register(dev);
+	if (ddev->of_node && data)
+		ret = data->switch_register(dev);
+	else
+		ret = ksz8795_switch_register(dev);
 
 	/* Main DSA driver may not be started yet. */
 	if (ret)
@@ -78,14 +133,6 @@ static void ksz8795_spi_shutdown(struct spi_device *spi)
 		dev->dev_ops->shutdown(dev);
 }
 
-static const struct of_device_id ksz8795_dt_ids[] = {
-	{ .compatible = "microchip,ksz8765" },
-	{ .compatible = "microchip,ksz8794" },
-	{ .compatible = "microchip,ksz8795" },
-	{},
-};
-MODULE_DEVICE_TABLE(of, ksz8795_dt_ids);
-
 static struct spi_driver ksz8795_spi_driver = {
 	.driver = {
 		.name	= "ksz8795-switch",
