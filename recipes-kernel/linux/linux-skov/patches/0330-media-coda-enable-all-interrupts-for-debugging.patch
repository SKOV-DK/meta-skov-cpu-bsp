From: Philipp Zabel <p.zabel@pengutronix.de>
Date: Fri, 29 Jun 2018 15:58:34 +0200
Subject: [PATCH] media: coda: enable all interrupts for debugging

Enable all interrupts and log them to dmesg.

Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>
---
 drivers/media/platform/coda/coda-bit.c    | 38 ++++++++++++++++++++++++++++++-
 drivers/media/platform/coda/coda-common.c |  4 ++--
 drivers/media/platform/coda/coda_regs.h   | 12 +++++++++-
 3 files changed, 50 insertions(+), 4 deletions(-)

diff --git a/drivers/media/platform/coda/coda-bit.c b/drivers/media/platform/coda/coda-bit.c
index 8196daab02af..904b46e7ecd9 100644
--- a/drivers/media/platform/coda/coda-bit.c
+++ b/drivers/media/platform/coda/coda-bit.c
@@ -2691,13 +2691,49 @@ irqreturn_t coda_irq_handler(int irq, void *data)
 {
 	struct coda_dev *dev = data;
 	struct coda_ctx *ctx;
+	u32 status, reason;
 
 	/* read status register to attend the IRQ */
-	coda_read(dev, CODA_REG_BIT_INT_STATUS);
+	status = coda_read(dev, CODA_REG_BIT_INT_STATUS);
+	reason = coda_read(dev, CODA_REG_BIT_INT_REASON);
 	coda_write(dev, 0, CODA_REG_BIT_INT_REASON);
 	coda_write(dev, CODA_REG_BIT_INT_CLEAR_SET,
 		      CODA_REG_BIT_INT_CLEAR);
 
+	if (status != 1)
+		pr_debug("coda: interrupt status 0x%x\n", status);
+
+	switch (reason) {
+	case CODA_INT_BIT_INIT:
+	case CODA_INT_BIT_SEQ_INIT:
+	case CODA_INT_BIT_SEQ_END:
+	case CODA_INT_BIT_PIC_RUN:
+	case CODA_INT_BIT_SET_FRAME_BUF:
+		break;
+	case CODA_INT_BIT_BUF_EMPTY:
+		pr_debug("coda: interrupt reason 0x%x (buf empty)\n", reason);
+
+		ctx = v4l2_m2m_get_curr_priv(dev->m2m_dev);
+		if (ctx) {
+			struct __kfifo *kfifo = &ctx->bitstream_fifo.kfifo;
+
+			pr_debug("coda: before: rd = 0x%x, wr = 0x%x\n",
+				 kfifo->out & kfifo->mask,
+				 kfifo->in & kfifo->mask);
+			coda_kfifo_sync_from_device(ctx);
+			pr_debug("coda: after: rd = 0x%x, wr = 0x%x\n",
+				 kfifo->out & kfifo->mask,
+				 kfifo->in & kfifo->mask);
+		}
+		break;
+	default:
+		pr_debug("coda: interrupt reason 0x%x\n", reason);
+		break;
+	}
+
+	if (!(reason & CODA_INT_BIT_PIC_RUN))
+		return IRQ_HANDLED;
+
 	ctx = v4l2_m2m_get_curr_priv(dev->m2m_dev);
 	if (ctx == NULL) {
 		v4l2_err(&dev->v4l2_dev,
diff --git a/drivers/media/platform/coda/coda-common.c b/drivers/media/platform/coda/coda-common.c
index 6a9902b728ac..b1712028197f 100644
--- a/drivers/media/platform/coda/coda-common.c
+++ b/drivers/media/platform/coda/coda-common.c
@@ -2889,8 +2889,8 @@ static int coda_hw_init(struct coda_dev *dev)
 	if (dev->devtype->product != CODA_DX6)
 		coda_write(dev, 0, CODA7_REG_BIT_AXI_SRAM_USE);
 
-	coda_write(dev, CODA_INT_INTERRUPT_ENABLE,
-		      CODA_REG_BIT_INT_ENABLE);
+	/* Enable all interrupts for debugging purposes */
+	coda_write(dev, 0xffffffff, CODA_REG_BIT_INT_ENABLE);
 
 	/* Reset VPU and start processor */
 	data = coda_read(dev, CODA_REG_BIT_CODE_RESET);
diff --git a/drivers/media/platform/coda/coda_regs.h b/drivers/media/platform/coda/coda_regs.h
index da5bb3212528..25b87b18f3eb 100644
--- a/drivers/media/platform/coda/coda_regs.h
+++ b/drivers/media/platform/coda/coda_regs.h
@@ -123,7 +123,17 @@
 #define		CODA9_MODE_ENCODE_MJPG		13
 #define		CODA_MODE_INVALID		0xffff
 #define CODA_REG_BIT_INT_ENABLE		0x170
-#define		CODA_INT_INTERRUPT_ENABLE	(1 << 3)
+#define		CODA_INT_BIT_INIT		(1 << 0)
+#define		CODA_INT_BIT_SEQ_INIT		(1 << 1)
+#define		CODA_INT_BIT_SEQ_END		(1 << 2)
+#define		CODA_INT_BIT_PIC_RUN		(1 << 3)
+#define		CODA_INT_BIT_SET_FRAME_BUF	(1 << 4)
+#define		CODA_INT_BIT_ENC_HEADER		(1 << 5)
+#define		CODA_INT_BIT_ENC_PARA_SET	(1 << 6)
+#define		CODA_INT_BIT_DEC_PARA_SET	(1 << 7)
+#define		CODA_INT_BIT_DEC_BUF_FLUSH	(1 << 8)
+#define		CODA_INT_BIT_BUF_EMPTY		(1 << 14)
+#define		CODA_INT_BIT_BUF_FULL		(1 << 15)
 #define CODA_REG_BIT_INT_REASON			0x174
 #define CODA7_REG_BIT_RUN_AUX_STD		0x178
 #define		CODA_MP4_AUX_MPEG4		0
