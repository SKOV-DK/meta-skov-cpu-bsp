From: Philipp Zabel <p.zabel@pengutronix.de>
Date: Mon, 10 Sep 2018 11:46:21 +0200
Subject: [PATCH] media: coda: store unmasked fifo position in meta

Storing the unmasked kfifo->in position as meta->start and ->end allows
to more easily compare a point past meta->end with the current
kfifo->in.

Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>
---
 drivers/media/platform/coda/coda-bit.c    |  9 +++------
 drivers/media/platform/coda/coda-common.c |  5 +----
 drivers/media/platform/coda/coda.h        |  4 ++--
 drivers/media/platform/coda/trace.h       | 10 ++++++----
 4 files changed, 12 insertions(+), 16 deletions(-)

diff --git a/drivers/media/platform/coda/coda-bit.c b/drivers/media/platform/coda/coda-bit.c
index 3fcaf8d4b69d..0b20ff275a2d 100644
--- a/drivers/media/platform/coda/coda-bit.c
+++ b/drivers/media/platform/coda/coda-bit.c
@@ -314,8 +314,7 @@ void coda_fill_bitstream(struct coda_ctx *ctx, struct list_head *buffer_list)
 		}
 
 		/* Buffer start position */
-		start = ctx->bitstream_fifo.kfifo.in &
-			ctx->bitstream_fifo.kfifo.mask;
+		start = ctx->bitstream_fifo.kfifo.in;
 
 		if (coda_bitstream_try_queue(ctx, src_buf)) {
 			/*
@@ -330,8 +329,7 @@ void coda_fill_bitstream(struct coda_ctx *ctx, struct list_head *buffer_list)
 				meta->timecode = src_buf->timecode;
 				meta->timestamp = src_buf->vb2_buf.timestamp;
 				meta->start = start;
-				meta->end = ctx->bitstream_fifo.kfifo.in &
-					    ctx->bitstream_fifo.kfifo.mask;
+				meta->end = ctx->bitstream_fifo.kfifo.in;
 				spin_lock_irqsave(&ctx->buffer_meta_lock,
 						  flags);
 				list_add_tail(&meta->list,
@@ -2056,8 +2054,7 @@ static int coda_prepare_decode(struct coda_ctx *ctx)
 		u16 soi, eoi;
 
 		/* If this is the last buffer in the bitstream, add padding */
-		if (meta->end == (ctx->bitstream_fifo.kfifo.in &
-				  ctx->bitstream_fifo.kfifo.mask)) {
+		if (meta->end == ctx->bitstream_fifo.kfifo.in) {
 			static unsigned char buf[512];
 			unsigned int pad;
 
diff --git a/drivers/media/platform/coda/coda-common.c b/drivers/media/platform/coda/coda-common.c
index 312e5d26ea50..82fde20b71a1 100644
--- a/drivers/media/platform/coda/coda-common.c
+++ b/drivers/media/platform/coda/coda-common.c
@@ -1422,10 +1422,7 @@ static int coda_job_ready(void *m2m_priv)
 
 		meta = list_first_entry(&ctx->buffer_meta_list,
 					struct coda_buffer_meta, list);
-		if (meta->end >= meta->start)
-			meta_size = meta->end - meta->start;
-		else
-			meta_size = ctx->bitstream.size - meta->start + meta->end;
+		meta_size = meta->end - meta->start;
 		if (!stream_end && payload < meta_size + 512) {
 			trace_coda_not_ready(ctx, stream_end, src_bufs, num_metas, payload);
 			coda_dbg(1, ctx,
diff --git a/drivers/media/platform/coda/coda.h b/drivers/media/platform/coda/coda.h
index 185e7306a76a..f5918e8e5f0e 100644
--- a/drivers/media/platform/coda/coda.h
+++ b/drivers/media/platform/coda/coda.h
@@ -151,8 +151,8 @@ struct coda_buffer_meta {
 	u32			sequence;
 	struct v4l2_timecode	timecode;
 	u64			timestamp;
-	u32			start;
-	u32			end;
+	unsigned int		start;
+	unsigned int		end;
 };
 
 /* Per-queue, driver-specific private data */
diff --git a/drivers/media/platform/coda/trace.h b/drivers/media/platform/coda/trace.h
index 21824a7fada2..9bd0c85510fa 100644
--- a/drivers/media/platform/coda/trace.h
+++ b/drivers/media/platform/coda/trace.h
@@ -101,8 +101,8 @@ DECLARE_EVENT_CLASS(coda_buf_meta_class,
 		__entry->minor = ctx->fh.vdev->minor;
 		__entry->index = buf->vb2_buf.index;
 		__entry->timestamp = buf->vb2_buf.timestamp;
-		__entry->start = meta->start;
-		__entry->end = meta->end;
+		__entry->start = meta->start & ctx->bitstream_fifo.kfifo.mask;
+		__entry->end = meta->end & ctx->bitstream_fifo.kfifo.mask;
 		__entry->ctx = ctx->idx;
 	),
 
@@ -131,8 +131,10 @@ DECLARE_EVENT_CLASS(coda_meta_class,
 
 	TP_fast_assign(
 		__entry->minor = ctx->fh.vdev->minor;
-		__entry->start = meta ? meta->start : 0;
-		__entry->end = meta ? meta->end : 0;
+		__entry->start = meta ? (meta->start &
+					 ctx->bitstream_fifo.kfifo.mask) : 0;
+		__entry->end = meta ? (meta->end &
+				       ctx->bitstream_fifo.kfifo.mask) : 0;
 		__entry->ctx = ctx->idx;
 	),
 
