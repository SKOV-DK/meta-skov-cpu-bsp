From: Philipp Zabel <p.zabel@pengutronix.de>
Date: Fri, 22 Mar 2019 15:42:36 +0100
Subject: [PATCH] media: coda: pad by repeating headers on CodaHx4

CodaHx4 doesn't like MPEG-2 user data, so pad to 512 bytes by repeating
sequence and extension headers.

Signed-off-by: Philipp Zabel <p.zabel@pengutronix.de>
---
 drivers/media/platform/coda/coda-bit.c | 51 ++++++++++++++++++++++++----------
 1 file changed, 36 insertions(+), 15 deletions(-)

diff --git a/drivers/media/platform/coda/coda-bit.c b/drivers/media/platform/coda/coda-bit.c
index f83a112e512d..b0f283422f1e 100644
--- a/drivers/media/platform/coda/coda-bit.c
+++ b/drivers/media/platform/coda/coda-bit.c
@@ -234,48 +234,69 @@ static int coda_bitstream_pad(struct coda_ctx *ctx, u32 size)
 	return (n < size) ? -ENOSPC : 0;
 }
 
-static int coda_bitstream_queue(struct coda_ctx *ctx,
-				struct vb2_v4l2_buffer *src_buf)
+static int coda_bitstream_queue(struct coda_ctx *ctx, const u8 *buf, u32 size)
 {
-	u32 src_size = vb2_get_plane_payload(&src_buf->vb2_buf, 0);
-	u32 n;
-
-	n = kfifo_in(&ctx->bitstream_fifo,
-			vb2_plane_vaddr(&src_buf->vb2_buf, 0), src_size);
-	if (n < src_size)
-		return -ENOSPC;
-
-	src_buf->sequence = ctx->qsequence++;
+	u32 n = kfifo_in(&ctx->bitstream_fifo, buf, size);
 
-	return 0;
+	return (n < size) ? -ENOSPC : 0;
 }
 
 static bool coda_bitstream_try_queue(struct coda_ctx *ctx,
 				     struct vb2_v4l2_buffer *src_buf)
 {
 	unsigned long payload = vb2_get_plane_payload(&src_buf->vb2_buf, 0);
+	u8 *vaddr = vb2_plane_vaddr(&src_buf->vb2_buf, 0);
 	int ret;
+	int i;
 
 	if (coda_get_bitstream_payload(ctx) + payload + 512 >=
 	    ctx->bitstream.size)
 		return false;
 
-	if (vb2_plane_vaddr(&src_buf->vb2_buf, 0) == NULL) {
+	if (vaddr == NULL) {
 		v4l2_err(&ctx->dev->v4l2_dev, "trying to queue empty buffer\n");
 		return true;
 	}
 
+	/* Pad with repeated sequence headers on CodaHx4 MPEG-2 */
+	if (ctx->qsequence == 0 && payload < 512 &&
+	    ctx->dev->devtype->product == CODA_HX4 &&
+	    ctx->codec->src_fourcc == V4L2_PIX_FMT_MPEG2) {
+		if (payload != 22 ||
+		    vaddr[0] != 0 ||
+		    vaddr[1] != 0 ||
+		    vaddr[2] != 1 ||
+		    vaddr[3] != 0xb3 ||
+		    vaddr[12] != 0 ||
+		    vaddr[13] != 0 ||
+		    vaddr[14] != 1 ||
+		    vaddr[15] != 0xb5) {
+			coda_dbg(1, ctx, "unknown MPEG-2 header, can't pad\n");
+		} else {
+			for (i = 0; i < 23; i++) {
+				ret = coda_bitstream_queue(ctx, vaddr, payload);
+				if (ret < 0) {
+					v4l2_err(&ctx->dev->v4l2_dev, "bitstream buffer overflow\n");
+					return false;
+				}
+			}
+		}
+	}
+
 	/* Add padding before the first buffer, if it is too small */
 	if (ctx->qsequence == 0 && payload < 512 &&
 	    (ctx->codec->src_fourcc == V4L2_PIX_FMT_H264 ||
-	     ctx->codec->src_fourcc == V4L2_PIX_FMT_MPEG2))
+	     (ctx->codec->src_fourcc == V4L2_PIX_FMT_MPEG2 &&
+	      ctx->dev->devtype->product != CODA_HX4)))
 		coda_bitstream_pad(ctx, 512 - payload);
 
-	ret = coda_bitstream_queue(ctx, src_buf);
+	ret = coda_bitstream_queue(ctx, vaddr, payload);
 	if (ret < 0) {
 		v4l2_err(&ctx->dev->v4l2_dev, "bitstream buffer overflow\n");
 		return false;
 	}
+	src_buf->sequence = ctx->qsequence++;
+
 	/* Sync read pointer to device */
 	if (ctx == v4l2_m2m_get_curr_priv(ctx->dev->m2m_dev))
 		coda_kfifo_sync_to_device_write(ctx);
